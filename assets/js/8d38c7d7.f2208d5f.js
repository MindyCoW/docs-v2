"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[285],{19495:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=t(85893),d=t(11151);const o={},c="BONUS: CIDv0 and AppData",p={id:"cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",title:"BONUS: CIDv0 and AppData",description:"As explained before, the AppData points to an IPFS document. So given any CIDv0 we can calculate the equivalentAppData and the other way around.",source:"@site/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata.md",sourceDirName:"cow-sdk/order-meta-data-appdata",slug:"/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",permalink:"/docs-v2/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata.md",tags:[],version:"current",frontMatter:{}},r={},s=[];function i(a){const e=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",blockquote:"blockquote"},(0,d.ah)(),a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"bonus-cidv0-and-appdata",children:"BONUS: CIDv0 and AppData"}),"\n",(0,n.jsxs)(e.p,{children:["As explained before, the ",(0,n.jsx)(e.code,{children:"AppData"})," points to an IPFS document. So given any ",(0,n.jsx)(e.code,{children:"CIDv0"})," we can calculate the equivalent",(0,n.jsx)(e.code,{children:"AppData"})," and the other way around."]}),"\n",(0,n.jsxs)(e.p,{children:["Given an IPFS CIDv0 you can convert it to an ",(0,n.jsx)(e.code,{children:"AppData"})]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst decodedAppDataHex = await metadataApi.cidToAppDataHex('QmUf2TrpSANVXdgcYfAAACe6kg551cY3rAemB7xfEMjYvs')\n"})}),"\n",(0,n.jsxs)(e.p,{children:["This will return an ",(0,n.jsx)(e.code,{children:"AppData"})," hex: ",(0,n.jsx)(e.code,{children:"0x5ddb2c8207c10b96fac92cb934ef9ba004bc007a073c9e5b13edc422f209ed80"})]}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsx)(e.p,{children:"This might be handy if you decide to upload the document to IPFS yourself and then you need the AppData to post your order"}),"\n"]}),"\n",(0,n.jsxs)(e.p,{children:["Similarly, you can do the opposite and convert an ",(0,n.jsx)(e.code,{children:"AppData"})," into an IPFS document:"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-typescript",children:"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst decodedAppDataHex = await metadataApi.appDataHexToCid(hash)\n"})}),"\n",(0,n.jsxs)(e.p,{children:["This will return an IPFS CIDv0: ",(0,n.jsx)(e.code,{children:"QmUf2TrpSANVXdgcYfAAACe6kg551cY3rAemB7xfEMjYvs"})]}),"\n",(0,n.jsx)(e.p,{children:"\ud83c\udf89Congrats! you've learned how meta-data in orders work."})]})}const l=function(a={}){const{wrapper:e}=Object.assign({},(0,d.ah)(),a.components);return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(i,a)})):i(a)}},11151:(a,e,t)=>{t.d(e,{Zo:()=>p,ah:()=>o});var n=t(67294);const d=n.createContext({});function o(a){const e=n.useContext(d);return n.useMemo((()=>"function"==typeof a?a(e):{...e,...a}),[e,a])}const c={};function p({components:a,children:e,disableParentContext:t}){let p;return p=t?"function"==typeof a?a({}):a||c:o(a),n.createElement(d.Provider,{value:p},e)}}}]);