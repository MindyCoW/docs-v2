"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"CoW Protocol (Batch Auction)","items":[{"type":"category","label":"Creating orders","items":[{"type":"category","label":"CoW Swap","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Swap","href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/swap","docId":"cow-protocol/create/cowswap-ui/swap","unlisted":false},{"type":"link","label":"Cancel","href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/cancel","docId":"cow-protocol/create/cowswap-ui/cancel","unlisted":false},{"type":"link","label":"Native tokens","href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/native","docId":"cow-protocol/create/cowswap-ui/native","unlisted":false},{"type":"link","label":"Limit orders","href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/limit","docId":"cow-protocol/create/cowswap-ui/limit","unlisted":false},{"type":"link","label":"TWAP orders","href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/twap","docId":"cow-protocol/create/cowswap-ui/twap","unlisted":false}],"href":"/docs-v2/docs/cow-protocol/create/cowswap-ui/"},{"type":"category","label":"Custom integrations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scripts","href":"/docs-v2/docs/cow-protocol/create/custom-integration/script","docId":"cow-protocol/create/custom-integration/script","unlisted":false},{"type":"link","label":"Hooks","href":"/docs-v2/docs/cow-protocol/create/custom-integration/hook","docId":"cow-protocol/create/custom-integration/hook","unlisted":false},{"type":"link","label":"Widgets","href":"/docs-v2/docs/cow-protocol/create/custom-integration/widget","docId":"cow-protocol/create/custom-integration/widget","unlisted":false}],"href":"/docs-v2/docs/cow-protocol/create/custom-integration/"},{"type":"category","label":"Protocol integrations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Lending protocols (liquidations)","href":"/docs-v2/docs/cow-protocol/create/protocol-integration/liquidation","docId":"cow-protocol/create/protocol-integration/liquidation","unlisted":false}],"href":"/docs-v2/docs/cow-protocol/create/protocol-integration/"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Viewing orders","items":[{"type":"category","label":"CoW Explorer","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"By User","href":"/docs-v2/docs/cow-protocol/view/explorer/user","docId":"cow-protocol/view/explorer/user","unlisted":false},{"type":"link","label":"By Batch Auction","href":"/docs-v2/docs/cow-protocol/view/explorer/batch_auction","docId":"cow-protocol/view/explorer/batch_auction","unlisted":false}],"href":"/docs-v2/docs/cow-protocol/view/explorer/"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Solving orders","items":[{"type":"link","label":"Create a solver","href":"/docs-v2/docs/cow-protocol/solve/create","docId":"cow-protocol/solve/create","unlisted":false},{"type":"link","label":"Deploy a solver","href":"/docs-v2/docs/cow-protocol/solve/deploy","docId":"cow-protocol/solve/deploy","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Messaging","items":[{"type":"link","label":"OrderBook API","href":"/docs-v2/docs/cow-protocol/reference/apis/orderbook","docId":"cow-protocol/reference/apis/orderbook","unlisted":false},{"type":"link","label":"Solver API","href":"/docs-v2/docs/cow-protocol/reference/apis/solver","docId":"cow-protocol/reference/apis/solver","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs-v2/docs/cow-protocol/message/"},{"type":"category","label":"Arbitrating auctions","items":[{"type":"link","label":"Driver","href":"/docs-v2/docs/cow-protocol/arbitrate/driver","docId":"cow-protocol/arbitrate/driver","unlisted":false},{"type":"link","label":"Autopilot","href":"/docs-v2/docs/cow-protocol/arbitrate/autopilot","docId":"cow-protocol/arbitrate/autopilot","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs-v2/docs/cow-protocol/arbitrate/"},{"type":"category","label":"Settling auctions","items":[{"type":"link","label":"Contracts","href":"/docs-v2/docs/cow-protocol/settle/contracts","docId":"cow-protocol/settle/contracts","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs-v2/docs/cow-protocol/settle/"},{"type":"category","label":"Analysing auctions","items":[{"type":"link","label":"Dune Analytics","href":"/docs-v2/docs/cow-protocol/analyse/dune","docId":"cow-protocol/analyse/dune","unlisted":false},{"type":"link","label":"Subgraph","href":"/docs-v2/docs/cow-protocol/analyse/subgraph","docId":"cow-protocol/analyse/subgraph","unlisted":false},{"type":"link","label":"OrderBook API","href":"/docs-v2/docs/cow-protocol/reference/apis/orderbook","docId":"cow-protocol/reference/apis/orderbook","unlisted":false}],"collapsed":true,"collapsible":true,"href":"/docs-v2/docs/cow-protocol/analyse/"}],"collapsed":true,"collapsible":true}]},"docs":{"cow-protocol/analyse/dune":{"id":"cow-protocol/analyse/dune","title":"Dune Analytics","description":"","sidebar":"tutorialSidebar"},"cow-protocol/analyse/README":{"id":"cow-protocol/analyse/README","title":"Overview","description":"","sidebar":"tutorialSidebar"},"cow-protocol/analyse/subgraph":{"id":"cow-protocol/analyse/subgraph","title":"Subgraph","description":"","sidebar":"tutorialSidebar"},"cow-protocol/arbitrate/autopilot":{"id":"cow-protocol/arbitrate/autopilot","title":"Autopilot","description":"","sidebar":"tutorialSidebar"},"cow-protocol/arbitrate/driver":{"id":"cow-protocol/arbitrate/driver","title":"Driver","description":"","sidebar":"tutorialSidebar"},"cow-protocol/arbitrate/README":{"id":"cow-protocol/arbitrate/README","title":"Overview","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/cancel":{"id":"cow-protocol/create/cowswap-ui/cancel","title":"Cancel","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/limit":{"id":"cow-protocol/create/cowswap-ui/limit","title":"Limit orders","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/native":{"id":"cow-protocol/create/cowswap-ui/native","title":"Native tokens","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/README":{"id":"cow-protocol/create/cowswap-ui/README","title":"Overview","description":"Liquidity Integrated","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/swap":{"id":"cow-protocol/create/cowswap-ui/swap","title":"Swap","description":"- eth_sign / EIP-712","sidebar":"tutorialSidebar"},"cow-protocol/create/cowswap-ui/twap":{"id":"cow-protocol/create/cowswap-ui/twap","title":"TWAP orders","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/custom-integration/hook":{"id":"cow-protocol/create/custom-integration/hook","title":"Hooks","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/custom-integration/README":{"id":"cow-protocol/create/custom-integration/README","title":"Custom Integrations","description":"Overview","sidebar":"tutorialSidebar"},"cow-protocol/create/custom-integration/script":{"id":"cow-protocol/create/custom-integration/script","title":"Scripts","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/custom-integration/widget":{"id":"cow-protocol/create/custom-integration/widget","title":"Widgets","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/protocol-integration/liquidation":{"id":"cow-protocol/create/protocol-integration/liquidation","title":"Lending protocols (liquidations)","description":"","sidebar":"tutorialSidebar"},"cow-protocol/create/protocol-integration/README":{"id":"cow-protocol/create/protocol-integration/README","title":"Protocol Integrations","description":"Overview","sidebar":"tutorialSidebar"},"cow-protocol/message/README":{"id":"cow-protocol/message/README","title":"Overview","description":"Orderbook","sidebar":"tutorialSidebar"},"cow-protocol/reference/apis/orderbook":{"id":"cow-protocol/reference/apis/orderbook","title":"OrderBook API","description":"https://github.com/cowprotocol/services/blob/44bf11c4d0bd50591a3dbef6ee9aded2eafa01c0/crates/solvers/openapi.yml#L4","sidebar":"tutorialSidebar"},"cow-protocol/reference/apis/solver":{"id":"cow-protocol/reference/apis/solver","title":"Solver API","description":"","sidebar":"tutorialSidebar"},"cow-protocol/settle/contracts":{"id":"cow-protocol/settle/contracts","title":"Contracts","description":"","sidebar":"tutorialSidebar"},"cow-protocol/settle/README":{"id":"cow-protocol/settle/README","title":"Overview","description":"","sidebar":"tutorialSidebar"},"cow-protocol/solve/create":{"id":"cow-protocol/solve/create","title":"Create a solver","description":"","sidebar":"tutorialSidebar"},"cow-protocol/solve/deploy":{"id":"cow-protocol/solve/deploy","title":"Deploy a solver","description":"","sidebar":"tutorialSidebar"},"cow-protocol/solve/README":{"id":"cow-protocol/solve/README","title":"Overview","description":"What is a Solver?"},"cow-protocol/view/explorer/batch_auction":{"id":"cow-protocol/view/explorer/batch_auction","title":"By Batch Auction","description":"","sidebar":"tutorialSidebar"},"cow-protocol/view/explorer/README":{"id":"cow-protocol/view/explorer/README","title":"Overview","description":"","sidebar":"tutorialSidebar"},"cow-protocol/view/explorer/user":{"id":"cow-protocol/view/explorer/user","title":"By User","description":"","sidebar":"tutorialSidebar"},"cow-sdk/cow-api":{"id":"cow-sdk/cow-api","title":"CoW API","description":"The SDK provides access to the CoW API. The CoW API allows you:"},"cow-sdk/getting-started-with-the-sdk":{"id":"cow-sdk/getting-started-with-the-sdk","title":"Getting Started with the SDK","description":"Install the SDK:"},"cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata":{"id":"cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata","title":"BONUS: CIDv0 and AppData","description":"As explained before, the AppData points to an IPFS document. So given any CIDv0 we can calculate the equivalentAppData and the other way around."},"cow-sdk/order-meta-data-appdata/create-a-meta-data-document":{"id":"cow-sdk/order-meta-data-appdata/create-a-meta-data-document","title":"Create a meta-data document","description":"Orders in CoW Protocol can contain arbitrary data in a field called AppData."},"cow-sdk/order-meta-data-appdata/download-a-document-given-the-appdata":{"id":"cow-sdk/order-meta-data-appdata/download-a-document-given-the-appdata","title":"Download a document given the AppData","description":"Given the AppData of a document that has been uploaded to IPFS, you can easily retrieve the document."},"cow-sdk/order-meta-data-appdata/get-the-appdata-hex":{"id":"cow-sdk/order-meta-data-appdata/get-the-appdata-hex","title":"Get the AppData Hex","description":"The AppData Hex points to an IPFS document with the meta-data attached to the order."},"cow-sdk/order-meta-data-appdata/README":{"id":"cow-sdk/order-meta-data-appdata/README","title":"Order meta-data (AppData)","description":"The protocol have some means to attach arbitrary information to any order. This data will be available by using only on-chain data and IPFS."},"cow-sdk/order-meta-data-appdata/upload-document-to-ipfs":{"id":"cow-sdk/order-meta-data-appdata/upload-document-to-ipfs","title":"Upload document to IPFS","description":"The SDK uses Pinata to upload it to IPFS, so you will need an API Key in order to upload it using the SDK."},"cow-sdk/querying-the-cow-subgraph":{"id":"cow-sdk/querying-the-cow-subgraph","title":"Querying the Cow Subgraph","description":"The Subgraph is constantly indexing the protocol, making all the information more accessible. It provides information about trades, users, tokens and settlements. Additionally, it has some data aggregations which provides insights on the hourly/daily/totals USD volumes, trades, users, etc."},"cow-sdk/README":{"id":"cow-sdk/README","title":"CoW SDK","description":"This section provides some quick start information for integrating with CoW Protocol."},"cow-sdk/sign-and-post-orders/bonus-show-link-to-explorer":{"id":"cow-sdk/sign-and-post-orders/bonus-show-link-to-explorer","title":"BONUS: Show link to Explorer","description":"Once the order is posted, its good to allow to check the state of it."},"cow-sdk/sign-and-post-orders/enable-tokens":{"id":"cow-sdk/sign-and-post-orders/enable-tokens","title":"Enable Tokens","description":"Because of the use of off-chain signing (meta-transactions), users will need to Enable the sell token before signed orders can be considered as valid ones."},"cow-sdk/sign-and-post-orders/README":{"id":"cow-sdk/sign-and-post-orders/README","title":"Sign and Post orders","description":"In order to trade, you will need to create a valid order first."},"cow-sdk/sign-and-post-orders/step-1-get-market-price":{"id":"cow-sdk/sign-and-post-orders/step-1-get-market-price","title":"STEP 1: Get Market Price","description":"STEP 1: Get Market Price"},"cow-sdk/sign-and-post-orders/step-2-sign-the-order":{"id":"cow-sdk/sign-and-post-orders/step-2-sign-the-order","title":"STEP 2: Sign the order","description":"Once you know the price and fee, we can create the order and sign it:"},"cow-sdk/sign-and-post-orders/step-3-post-the-signed-order-to-the-api":{"id":"cow-sdk/sign-and-post-orders/step-3-post-the-signed-order-to-the-api","title":"STEP 3: Post the signed order to the API","description":"Once you have a signed order, last step is to send it to the API."},"front-end/cow-explorer":{"id":"front-end/cow-explorer","title":"CoW Explorer","description":"CoW Protocol Explorer is an \\"Etherscan\\" like interface for the CoW Protocol. Given that CoW Protocol leverages meta transactions, aka signed/offchain orders, the transactions submitted by the users are completely offline/off-chain and are therefore not visible on-chain until they have been fully executed. Because of it, the Explorer exists to help users find their orders, and be informed about the order details and their state."},"front-end/cow-protocol-custom-linking":{"id":"front-end/cow-protocol-custom-linking","title":"CoW Protocol Custom Linking","description":"Query Parameters"},"front-end/cowswap":{"id":"front-end/cowswap","title":"CoW Swap","description":"CoW Swap is the first trading interface built on top of CoW Protocol. It allows you to buy and sell tokens using gas-less orders that are settled p2p."},"front-end/creating-app-ids/choose-the-appcode-for-the-app":{"id":"front-end/creating-app-ids/choose-the-appcode-for-the-app","title":"Choose the appCode for the app","description":"The appCode is an unique identifier for the app or person who has created this data point."},"front-end/creating-app-ids/create-the-order-meta-data-file/additional-order-preferences":{"id":"front-end/creating-app-ids/create-the-order-meta-data-file/additional-order-preferences","title":"Additional Order Preferences","description":"This sections is relevant for CoW Hooks"},"front-end/creating-app-ids/create-the-order-meta-data-file/appcode":{"id":"front-end/creating-app-ids/create-the-order-meta-data-file/appcode","title":"AppCode","description":"What is the AppCode?"},"front-end/creating-app-ids/create-the-order-meta-data-file/metadata":{"id":"front-end/creating-app-ids/create-the-order-meta-data-file/metadata","title":"MetaData","description":"The metadata document is a JSON file that follows a specific format."},"front-end/creating-app-ids/create-the-order-meta-data-file/README":{"id":"front-end/creating-app-ids/create-the-order-meta-data-file/README","title":"Create the order meta-data file","description":"There\'s a tool part of CoW Protocol Explorer to assist in the process of defining a custom meta-data file. It\'s available at https://explorer.cow.fi/appdata. There you will be able to interactively build the file, upload it to IPFS and decode existing appData hashes."},"front-end/creating-app-ids/get-the-digest-hash-from-the-cid":{"id":"front-end/creating-app-ids/get-the-digest-hash-from-the-cid","title":"Get the digest hash from the CID","description":"Now that your file has been uploaded to IPFS, there\'s one last step to get the appData:"},"front-end/creating-app-ids/README":{"id":"front-end/creating-app-ids/README","title":"Creating App Ids","description":"AppData is field is a bytes32 data include in all the orders//github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2Order.sol#L18"},"front-end/creating-app-ids/upload-the-file-to-ipfs":{"id":"front-end/creating-app-ids/upload-the-file-to-ipfs","title":"Upload the file to IPFS","description":"Having the JSON file, now you need to upload it to IPFS."},"front-end/introduction":{"id":"front-end/introduction","title":"Introduction","description":"CoW Protocol can have different front ends, depending on the dapp you are interacting with. CoW Swap is the first trading interface built on top of the protocol, followed by a Balancer UI, which integrated CoW Protocol natively in their default trading interface."},"off-chain-services/api/fee-mechanism":{"id":"off-chain-services/api/fee-mechanism","title":"Fee Mechanism","description":"In CoW Protocol, the blockchain transactions that settle user orders are submitted by the settlement backend run by the solvers, which incurs gas costs. This cost is forwarded to orders in the form of protocol fees. The aim of this protocol fee is for the solvers to cover the costs of executing the order within a batch auction."},"off-chain-services/api/price-estimation":{"id":"off-chain-services/api/price-estimation","title":"Price Estimation","description":"As stated in other sections, CoW Protocol works with signed messages instead of executing transactions on the go. This means, that on the UI, the user sees a price quote that is based on an estimation of what prices will that particular order be settled with. One particular feature of CoW Protocol is that within the price estimation, it shows \\"the minimum amount to be received\\" which is a price quote that can\'t be violated, meaning that the protocol will either give you that price or the order will expire and be canceled without any cost. Although, if through CoWs, the protocol can offer you a better quote than the minimum received, it will execute your order with a surplus. In other words, price estimation is a lower bound on the proceeds a user can get for their trade. While we are working on it, at the moment slippage is not yet included in the price estimate"},"off-chain-services/api/README":{"id":"off-chain-services/api/README","title":"API","description":"Directly interact with the CoW protocol to place, manage and settle your orders through a documented API interface."},"off-chain-services/introduction":{"id":"off-chain-services/introduction","title":"Introduction","description":"On CoW Protocol, orders are placed off-chain and are not immediately executed, but rather collected and aggregated to be settled in batches. CoW Protocol does not need to work with executed transactions in order for users to be able to trade. The smart contract architecture is composed of an allowance manager and a settlement smart contract. There are two main components that work off-chain, which are the API used for the fee mechanism and price estimations, and the solvers, used for finding different settlements solutions for each batch auction. Let\'s deep dive into how these work:"},"overview/batch-auctions":{"id":"overview/batch-auctions","title":"Batch Auctions","description":"On CoW Protocol, orders are placed off-chain and are not immediately executed, but rather collected and aggregated to be settled in batches. CoW Protocol replaces a central operator by an open solvers competition for order matching, with the term solver referring to anyone who submits an order settlement solution for a batch. As soon as a batch is \\"closed for orders\\" meaning that it does not consider any new orders, these solvers can compete to provide optimized solutions matching the orders in this closed batch."},"overview/coincidence-of-wants":{"id":"overview/coincidence-of-wants","title":"Coincidence of Wants","description":"CoW Protocol, because of its use of Batch Auctions, is optimized for finding Coincidence of Wants (CoWs) amongst the trades within a batch, as well as ring trades. But what exactly are Coincidence of Wants and ring trades?"},"overview/cow-hooks/cow-hooks-example/conclusion":{"id":"overview/cow-hooks/cow-hooks-example/conclusion","title":"Conclusion","description":"With CoW Hooks, the sky (or rather the MOOn) is the limit! There are many use cases which can now be fully automated with CoW Protocol orders thanks to hooks. Kickstarting some CoWMOOnity creativity: you can set up an order to un-stake a token with a pre-hook, swap it to a different token, then stake the newly received tokens. This allows you to maximize yields, and never hold any un-staked tokens while swapping."},"overview/cow-hooks/cow-hooks-example/configuration":{"id":"overview/cow-hooks/cow-hooks-example/configuration","title":"Configuration","description":"First things first, we need to configure some required user-specific things:"},"overview/cow-hooks/cow-hooks-example/permit-swap-and-bridge-cow-hook":{"id":"overview/cow-hooks/cow-hooks-example/permit-swap-and-bridge-cow-hook","title":"Permit, Swap & Bridge CoW Hook","description":"Now that we have the setup out of the way, lets make use of CoW Hooks to set up an order that, when executed will:"},"overview/cow-hooks/cow-hooks-example/README":{"id":"overview/cow-hooks/cow-hooks-example/README","title":"CoW Hooks Example","description":"Instead of just talking about this shiny new feature, let\u2019s see it in action! In this post, we will provide some sample code for integrating CoW Protocol and making the most out of CoW Hooks.\\\\"},"overview/cow-hooks/cow-hooks-example/requirements":{"id":"overview/cow-hooks/cow-hooks-example/requirements","title":"Requirements","description":"The sample code shared in this post will assume that you have a recent version of Deno installed. This is just an alternative to JavaScript runtime to NodeJS with some great security features (such as fine-grained access control)."},"overview/cow-hooks/cow-hooks-faq":{"id":"overview/cow-hooks/cow-hooks-faq","title":"CoW Hooks FAQ","description":"Are CoW Hooks already live?"},"overview/cow-hooks/README":{"id":"overview/cow-hooks/README","title":"CoW Hooks","description":"Built on top of the existing on-chain settlement layer"},"overview/introduction":{"id":"overview/introduction","title":"Introduction","description":"Introduction to CoW Protocol"},"overview/learnings-and-improvements-of-gpv1":{"id":"overview/learnings-and-improvements-of-gpv1","title":"Learnings & Improvements of GPv1","description":"Gnosis Protocol v1 was released by the Gnosis team at the beginning of 2020. The protocol had the right intention and design in place, but it was flawed in certain aspects such as:"},"overview/road-to-decentralization":{"id":"overview/road-to-decentralization","title":"Road to Decentralization","description":"CoW Protocol aims to be a fully decentralized protocol, but the reality is that in order to fully be decentralized, there\'s still a long road to walk through. Currently, the protocol has certain parts that are more decentralized than others, and if we were to decompartmentalize the protocol into pieces, we would have the following:"},"overview/signed-orders":{"id":"overview/signed-orders","title":"Signed Orders","description":"CoW Protocol does not need to work with executed transactions in order for users to be able to trade. The smart contract architecture is composed of an allowance manager and a settlement smart contract. The combination of these two contracts allow the protocol to offer users gas-free trades because it works with off-chain orders submitted via signed messages."},"README":{"id":"README","title":"CoW Protocol Overview","description":"Welcome"},"smart-contracts/allow-list-authenticator-1/guarantees":{"id":"smart-contracts/allow-list-authenticator-1/guarantees","title":"Guarantees","description":"1. No user funds can be touched except for settling an order that was authorized by the user"},"smart-contracts/allow-list-authenticator-1/README":{"id":"smart-contracts/allow-list-authenticator-1/README","title":"Allow-list authenticator","description":"The allow-list authenticator contract determines which addresses are solvers. Before executing any operation which is access-restricted to a solver, the settlement contract queries this contract to determine if the caller is a solver."},"smart-contracts/eth-flow-contract/high-level-description":{"id":"smart-contracts/eth-flow-contract/high-level-description","title":"High Level Description","description":"A smart contract handles ETH sell orders for the user."},"smart-contracts/eth-flow-contract/interactions":{"id":"smart-contracts/eth-flow-contract/interactions","title":"Interactions","description":"A user interacts with the contracts:"},"smart-contracts/eth-flow-contract/order-cancellation":{"id":"smart-contracts/eth-flow-contract/order-cancellation","title":"Order Invalidation","description":"The function to invalidate an order and return the ETH to the order creator is:"},"smart-contracts/eth-flow-contract/order-creation":{"id":"smart-contracts/eth-flow-contract/order-creation","title":"Order Creation","description":"The user calls a function on the eth-flow contract to create an order:"},"smart-contracts/eth-flow-contract/order-execution":{"id":"smart-contracts/eth-flow-contract/order-execution","title":"Order Execution","description":"After a user order is created, then the corresponding eth-flow contract order will be traded in CoW Swap."},"smart-contracts/eth-flow-contract/orders-in-storage":{"id":"smart-contracts/eth-flow-contract/orders-in-storage","title":"Orders in Storage","description":"The eth-flow contract stores user orders as a mapping:"},"smart-contracts/eth-flow-contract/README":{"id":"smart-contracts/eth-flow-contract/README","title":"ETH Flow Contract","description":"The CoW ETH Flow Contract is a new way of trading on CoW Protocol. This new way of trading is specifically designed to handle ETH, since the CoW Protocol Settlement Contract is only compatible with ERC20 tokens."},"smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders":{"id":"smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders","title":"User and ETH Flow Contract Orders","description":"Every ETH sell order from a user (\\"user order\\") will have a unique associated order in the eth-flow contract (\\"contract order\\")."},"smart-contracts/introduction":{"id":"smart-contracts/introduction","title":"Introduction","description":"CoW Protocol is a collection of smart contracts that settle user orders on-chain while leveraging other sources of liquidity. The goal of the protocol is bundling multiple user orders together to minimize fees deriving from using external liquidity sources and stave off miner-extractable value."},"smart-contracts/settlement-contract/README":{"id":"smart-contracts/settlement-contract/README","title":"Settlement Contract","description":"Settlement"},"smart-contracts/settlement-contract/signature-schemes":{"id":"smart-contracts/settlement-contract/signature-schemes","title":"Signature Schemes","description":"CoW Protocol handles user orders that are provided off-chain. To verify that an order was approved by a user, the smart contract requires the user to provide a valid signature for that order."},"smart-contracts/vault-relayer/balancer-external-balances":{"id":"smart-contracts/vault-relayer/balancer-external-balances","title":"Balancer External Balances","description":"The first mechanism that the Vault relayer contract can use to withdraw user ERC20 tokens is through Vault external balances. This works by having an ERC20 allowance for the Balancer Vault, and a relayer approval for the Vault relayer contract."},"smart-contracts/vault-relayer/balancer-internal-balances":{"id":"smart-contracts/vault-relayer/balancer-internal-balances","title":"Balancer Internal Balances","description":"The second mechanism is to use balances internal to the Vault. The Balancer V2 vault can accrue ERC20 token balances and keep track of them internally in order to allow extremely gas-efficient transfers and swaps. The CoW protocol contracts can make use of this in order to decrease the gas cost of settling a user order on-chain. In order for this to work, the user must approve the Vault relayer contract and have internal Vault balances available."},"smart-contracts/vault-relayer/fallback-erc20-allowances":{"id":"smart-contracts/vault-relayer/fallback-erc20-allowances","title":"Fallback ERC20 Allowances","description":"The third and final method of approving tokens for CoW protocol is to use direct ERC20 allowances to the Vault relayer. This works like most other trading protocols, where for each token you want to sell, an allowance must first be approved for the Vault relayer contract."},"smart-contracts/vault-relayer/README":{"id":"smart-contracts/vault-relayer/README","title":"Vault relayer","description":"The Vault relayer contract is an important component used to protect user funds from malicious solvers. As previously mentioned, the settlement contract allows using arbitrary on-chain liquidity through interactions (such as performing a swap on Balancer V2, or performing a Paraswap trade). If Vault and ERC20 allowances were made directly to a settlement contract, a malicious solver could drain user funds through the interaction mechanism. However, since these allowances are made to the Vault relayer contract and interactions to the contract are strictly forbidden, malicious solvers have no direct access to user funds. The settlement contract uses the vault relayer to withdraw user tokens only as part of the trade, which contains strong guarantees that the user\'s signed order parameters are respected."},"solvers/how-to-build-a-solver/how-to-test-a-solver-locally":{"id":"solvers/how-to-build-a-solver/how-to-test-a-solver-locally","title":"How to test a solver locally","description":"In this short tutorial, we describe the steps needed in order to set up the Driver locally and allow a custom Solver to interact with it."},"solvers/how-to-build-a-solver/how-to-write-a-solver":{"id":"solvers/how-to-build-a-solver/how-to-write-a-solver","title":"How to write a solver","description":"This tutorial was fully composed by poolpitako, link to the original tutorial doc can be found here"},"solvers/how-to-build-a-solver/README":{"id":"solvers/how-to-build-a-solver/README","title":"How to Build a Solver","description":"This section contains recourses on building a solver."},"solvers/how-to-build-a-solver/solver-workshop":{"id":"solvers/how-to-build-a-solver/solver-workshop","title":"Solver Workshop","description":"FINDING THE BEST TRADING PATHS/SCENARIOS WITH YOUR SOLVER"},"solvers/in-depth-solver-specification/getting-notified-about-the-ranking":{"id":"solvers/in-depth-solver-specification/getting-notified-about-the-ranking","title":"Getting notified about the ranking","description":"A very useful functionality provided by the driver is the \\"notify\\" endpoint, which notifies all solvers participating in an auction about the ranking, once the bidding has closed, i.e., once all solutions have been submitted and have been ranked. (To find out about how solutions are ranked, see this section).\\\\"},"solvers/in-depth-solver-specification/input-batch-auction-instances":{"id":"solvers/in-depth-solver-specification/input-batch-auction-instances","title":"Input: Batch auction instances","description":"This section describes the format of Batch Auction Instances."},"solvers/in-depth-solver-specification/introduction":{"id":"solvers/in-depth-solver-specification/introduction","title":"Introduction","description":"The Cow Protocol uses batch auctions (see here for more details) for executing the trades. Within a given batch, the goal is to compute prices and traded amounts in order to maximize a well-defined utility function. This can be formulated as a concrete optimization problem that needs to be solved, and this is where the Solvers comes into place."},"solvers/in-depth-solver-specification/output-batch-auction-solutions":{"id":"solvers/in-depth-solver-specification/output-batch-auction-solutions","title":"Output: Batch auction solutions","description":"The output is also formatted in JSON. We start with an example of how the simplest possible (i.e., empty) response looks like, and then describe the fields it contains.&#x20;"},"solvers/in-depth-solver-specification/README":{"id":"solvers/in-depth-solver-specification/README","title":"In-depth: Solver specification","description":"Here, we take a deeper diver into how the problem that a Solver tackles looks like, and the technical details behind the functionality of Solvers."},"solvers/in-depth-solver-specification/sample-test-instances":{"id":"solvers/in-depth-solver-specification/sample-test-instances","title":"Sample Test Instances","description":"In this section, we provide sample instances following the json format described in the previous sections, along with the optimal solution, again in the appropriate json format. These can be used for testing purposes while developing a solver. We clarify that the solutions provided are optimal up to a very small factor (caused by rounding very small amounts).\\\\"},"solvers/in-depth-solver-specification/slippage-accounting":{"id":"solvers/in-depth-solver-specification/slippage-accounting","title":"Slippage accounting","description":"Solver Slippage Accounting"},"solvers/in-depth-solver-specification/social-consensus-rules":{"id":"solvers/in-depth-solver-specification/social-consensus-rules","title":"Social Consensus Rules","description":"Social consensus rules are not enforced by the smart contract. However, by voting on them in a CoW improvement proposal (CIP), the DAO has decided that these rules should be followed to ensure a healthy competition. A violation of these rules can lead to penalizing or even slashing (if the DAO decides so).&#x20;"},"solvers/in-depth-solver-specification/solver-auction-and-rewards":{"id":"solvers/in-depth-solver-specification/solver-auction-and-rewards","title":"Solver Auction and Rewards","description":"As specified in CIP-20, solver rewards are split into two components: per-auction rewards and consistency rewards."},"solvers/in-depth-solver-specification/the-batch-auction-optimization-problem":{"id":"solvers/in-depth-solver-specification/the-batch-auction-optimization-problem","title":"The Batch Auction Optimization Problem","description":"In this section, we describe all the different components of the optimization problem that needs to be solved within each batch."},"solvers/solvers":{"id":"solvers/solvers","title":"Introduction","description":"Intent-based trading"},"tutorials/build-on-top-of-cow-protocol":{"id":"tutorials/build-on-top-of-cow-protocol","title":"Build on top of CoW Protocol","description":"This document provides some quick start information for integrating to CoW Protocol. You will find an introduction to the protocol, its tools, resources, and documentation, along with some convenient"},"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell":{"id":"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell","title":"Approving the tokens to sell","description":"The first step is approving the tokens you want to sell to the GPv2VaultRelayer."},"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/conclusion":{"id":"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/conclusion","title":"Conclusion","description":"CoW Protocol is a great way of doing trades. The more users go through CoW Protocol the more CoWs we will see."},"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order":{"id":"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order","title":"Creating the order","description":"Let\u2019s do an intermediate step and create a method to submit the order. The gist of the process is the following:"},"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/README":{"id":"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/README","title":"CoW Protocol trades with a Gnosis Safe Wallet","description":"This tutorial was fully composed by poolpitako, link to the original tutorial doc can be found  here"},"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe":{"id":"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe","title":"Running the tx from the safe","description":"The last step is running a tx submission to the multisign using the previous method."},"tutorials/how-to-place-erc-1271-smart-contract-orders/additional-use-cases":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/additional-use-cases","title":"Additional Use Cases","description":"GAT orders aren\'t the only thing that is possible:"},"tutorials/how-to-place-erc-1271-smart-contract-orders/current-orders":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/current-orders","title":"Current Orders","description":"CoW Protocol orders are, in essence, just a \\"blob\\" of structured data. As you see here, they are a set of order fields that include all the required information for that order. For example, the sell token, buy token, amounts, pro-rated fee, etc."},"tutorials/how-to-place-erc-1271-smart-contract-orders/good-after-time-gat-orders":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/good-after-time-gat-orders","title":"Good After Time (GAT) Orders","description":"Good after time, or GAT, orders are very basically orders that become valid only after a given timestamp. Currently, this is not supported natively by CoW Protocol, which only supports order expiry. Thanks to ERC-1271, creating such an order and extending the CoW Protocol becomes possible. All we need to do is add a check in the isValidSignature implementation that the current block timestamp is older than some validFrom value. The CoW Protocol services constantly simulate isValidSignature before each batch, meaning that the order would get automatically picked up and included in a batch auction once it matures. Since the signature validation would revert if the check is not met, this means that we would effectively have a trust-less check preventing the order from being filled. Even if a malicious solver would try to include a GAT order before it was mature, the CoW Protocol settlement contract would prevent it from executing a trade because the isValidSignature call would fail. Trust-less protocol extensions, nice!"},"tutorials/how-to-place-erc-1271-smart-contract-orders/README":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/README","title":"How to place ERC-1271 (Smart Contract) Orders","description":"The following section is intended as a guide on how to place Smart Contract orders with ERC-1271.&#x20;"},"tutorials/how-to-place-erc-1271-smart-contract-orders/smart-contract-wallet-orders":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/smart-contract-wallet-orders","title":"Smart Contract Wallet Orders","description":"The spirit of ERC-1271 support in CoW Protocol was to enable Smart Contract wallets like to be able to trade on CoW Protocol and CoW Swap. Each individual Smart Contract wallet would then be able to implement their own signature validation scheme, for example:"},"tutorials/how-to-place-erc-1271-smart-contract-orders/smart-orders":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/smart-orders","title":"Smart Orders","description":"Smart Orders"},"tutorials/how-to-place-erc-1271-smart-contract-orders/the-basics-of-erc-1271":{"id":"tutorials/how-to-place-erc-1271-smart-contract-orders/the-basics-of-erc-1271","title":"The Basics of ERC-1271","description":"While this works for EOAs, which have private keys, it does not work for Smart Contracts, and specifically Smart Contract Wallets. This is because Smart Contracts have no \\"private keys\\", to use for elliptic curve cryptography. Meaning, that Smart Contracts really be used for ECDSA signing. In order to work around this, a different signature is needed that does not depend on elliptic curve cryptography."},"tutorials/how-to-submit-orders-via-the-api/checking-order-status":{"id":"tutorials/how-to-submit-orders-via-the-api/checking-order-status","title":"5. Checking order status","description":"In order to follow if/when your order has been matched you can either subscribe to \u201cTrade\u201d events by the Settlement Contract:"},"tutorials/how-to-submit-orders-via-the-api/placing-the-order":{"id":"tutorials/how-to-submit-orders-via-the-api/placing-the-order","title":"4. Placing the order","description":"Order creation is happening via a POST request to the following endpoint:"},"tutorials/how-to-submit-orders-via-the-api/query-the-fee-endpoint":{"id":"tutorials/how-to-submit-orders-via-the-api/query-the-fee-endpoint","title":"2. Get a Quote","description":"Placing an order is free in CoW Protocol and only requires signing an off chain message. Order execution is then done by so-called solvers and doesn\u2019t require you to pay any gas."},"tutorials/how-to-submit-orders-via-the-api/README":{"id":"tutorials/how-to-submit-orders-via-the-api/README","title":"Submit orders via the API","description":"In case you would like to submit orders programmatically instead of via a UI, this tutorial will show you how to do that. There are a couple of use cases why you might want to do that"},"tutorials/how-to-submit-orders-via-the-api/set-allowance-for-the-sell-token":{"id":"tutorials/how-to-submit-orders-via-the-api/set-allowance-for-the-sell-token","title":"1. Set Allowance for the sell token","description":"In order for your order to be tradable, the owner account has to allow the GPv2 Vault Relayer  to spend the sell tokens on their behalf (if you are using an existing Balancer v2 approved token or the Balancer Vault\'s internal balance you may skip this step). You may either set a limited allowance (at least the amount of tokens you intend to sell) or an unlimited allowance (2\\\\\\\\256 - 1).\\\\"},"tutorials/how-to-submit-orders-via-the-api/signing-the-order":{"id":"tutorials/how-to-submit-orders-via-the-api/signing-the-order","title":"3. Signing the order","description":"We will resume the example from above, setting the validity (Unix timestamp) to August 4th 2021. We use keccak(GPv2 Place Order Tutorial) as appData (you can use your individual 32 bytes to identify the \u201csource\u201d of your orders)."},"tutorials/onchain-order-cancellation/README":{"id":"tutorials/onchain-order-cancellation/README","title":"Onchain Order Cancellation","description":"Before we begin, please note that our solvers can be quite quick, so it is entirely possible that your order will have already been filled before it can be invalidated onchain."},"tutorials/onchain-order-cancellation/submitting-invalidation":{"id":"tutorials/onchain-order-cancellation/submitting-invalidation","title":"Submitting Invalidation","description":"* After placing your order from the interface, in the top right corner click on \\"Pending\\""},"tutorials/onchain-order-cancellation/verifying-with-orderbook-api-services":{"id":"tutorials/onchain-order-cancellation/verifying-with-orderbook-api-services","title":"Verifying with Orderbook API Services","description":"* To check that the invalidation was picked up by our orderbook via the API service"},"tutorials/submit-limit-orders-via-api/general-overview":{"id":"tutorials/submit-limit-orders-via-api/general-overview","title":"General Overview","description":"A limit order is a long standing user order to buy a token at a price that may currently not be achievable. Once the price becomes achievable on-chain, the order executes and captures surplus.&#x20;"},"tutorials/submit-limit-orders-via-api/limit-order-structure":{"id":"tutorials/submit-limit-orders-via-api/limit-order-structure","title":"Limit Order Structure","description":"Here is a complete list of the parameters of a limit order and the corresponding type. This is the object that a user signs to validate its order"},"tutorials/submit-limit-orders-via-api/README":{"id":"tutorials/submit-limit-orders-via-api/README","title":"Submit Limit Orders via API","description":"Introduction"},"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/checking-limit-order-status":{"id":"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/checking-limit-order-status","title":"4. Checking Limit Order Status","description":"In order to follow if/when your order has been matched you can either subscribe to \u201cTrade\u201d events by the Settlement Contract:"},"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/placing-the-limit-order":{"id":"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/placing-the-limit-order","title":"3. Placing the Limit Order","description":"Order creation is happening via a POST request to the following endpoint:"},"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/README":{"id":"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/README","title":"Submitting the Limit Order","description":"Step by step limit order"},"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/setting-allowance-for-the-sell-token":{"id":"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/setting-allowance-for-the-sell-token","title":"1. Setting Allowance for the sell token","description":"For your order to be tradable, the owner account must allow the GPv2 Vault Relayer to spend the sell tokens on their behalf (if you are using an existing Balancer v2 approved token or the Balancer Vault\'s internal balance you may skip this step). You may either set a limited allowance (at least the amount of tokens you intend to sell) or an unlimited allowance (2\\\\\\\\256 - 1)."},"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/signing-the-limit-order":{"id":"tutorials/submit-limit-orders-via-api/submitting-the-limit-order/signing-the-limit-order","title":"2. Signing the Limit Order","description":"We will resume the example from above, setting the validity (Unix timestamp) to August 4th 2021. We use keccak(GPv2 Place Order Tutorial) as appData (you can use your individual 32 bytes to identify the \u201csource\u201d of your orders)."}}}')}}]);