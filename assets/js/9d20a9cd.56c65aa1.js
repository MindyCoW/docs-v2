"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[9332],{73113:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var n=r(85893),o=r(11151);const a={},c="Order Invalidation",d={id:"smart-contracts/eth-flow-contract/order-cancellation",title:"Order Invalidation",description:"The function to invalidate an order and return the ETH to the order creator is:",source:"@site/docs/smart-contracts/eth-flow-contract/order-cancellation.md",sourceDirName:"smart-contracts/eth-flow-contract",slug:"/smart-contracts/eth-flow-contract/order-cancellation",permalink:"/docs-v2/docs/smart-contracts/eth-flow-contract/order-cancellation",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/smart-contracts/eth-flow-contract/order-cancellation.md",tags:[],version:"current",frontMatter:{}},i={},s=[];function l(e){const t=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",a:"a",ol:"ol",li:"li"},(0,o.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"order-invalidation",children:"Order Invalidation"}),"\n",(0,n.jsx)(t.p,{children:"The function to invalidate an order and return the ETH to the order creator is:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function invalidateOrder(EthFlowOrder.Data order)\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"order"})," is the same order struct used for ",(0,n.jsx)(t.a,{href:"/docs-v2/docs/smart-contracts/eth-flow-contract/order-creation",children:"order creation"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Invalidating an order also refunds all unused ETH to the original creator of the order."}),"\n",(0,n.jsx)(t.p,{children:"Order can be invalidated in two ways:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"The user who created the order calls this function. Every valid order can be invalidated at any time by its creator."}),"\n",(0,n.jsx)(t.li,{children:"After the order is expired, any address can trigger its invalidation. This is done to allow CoW Swap to provide a service to automatically refund unmatched orders to the users."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Order validity and owner are recovered from the ",(0,n.jsx)(t.a,{href:"/docs-v2/docs/smart-contracts/eth-flow-contract/orders-in-storage",children:"order mapping"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Each order can be invalidated at most once and returns all funds that have not yet been used for trading."}),"\n",(0,n.jsxs)(t.p,{children:["After invalidation, the order is marked as invalid by setting the order mapping for the contract order digest to ",(0,n.jsx)(t.code,{children:"invalidated"}),"."]})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}},11151:(e,t,r)=>{r.d(t,{Zo:()=>d,ah:()=>a});var n=r(67294);const o=n.createContext({});function a(e){const t=n.useContext(o);return n.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const c={};function d({components:e,children:t,disableParentContext:r}){let d;return d=r?"function"==typeof e?e({}):e||c:a(e),n.createElement(o.Provider,{value:d},t)}}}]);