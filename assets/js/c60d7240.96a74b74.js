"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[5818],{48040:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var o=r(85893),n=r(11151);const s={},a="Order Creation",c={id:"smart-contracts/eth-flow-contract/order-creation",title:"Order Creation",description:"The user calls a function on the eth-flow contract to create an order:",source:"@site/docs/smart-contracts/eth-flow-contract/order-creation.md",sourceDirName:"smart-contracts/eth-flow-contract",slug:"/smart-contracts/eth-flow-contract/order-creation",permalink:"/docs-v2/docs/smart-contracts/eth-flow-contract/order-creation",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/smart-contracts/eth-flow-contract/order-creation.md",tags:[],version:"current",frontMatter:{}},i={},d=[];function h(e){const t=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",a:"a",ol:"ol",li:"li"},(0,n.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"order-creation",children:"Order Creation"}),"\n",(0,o.jsx)(t.p,{children:"The user calls a function on the eth-flow contract to create an order:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"function createOrder(EthFlowOrder.Data order) payable\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The parameters of the order creation struct can be seen ",(0,o.jsx)(t.a,{href:"https://github.com/cowprotocol/ethflowcontract/blob/v1.0.0/src/libraries/EthFlowOrder.sol#L19-L45",children:"in the source code"})," (together with their description) and are:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"IERC20 buyToken\naddress receiver\nuint256 sellAmount\nuint256 buyAmount\nbytes32 appData\nuint256 feeAmount\nuint32 validTo\nbool partiallyFillable\nint64 quoteId\n"})}),"\n",(0,o.jsxs)(t.p,{children:["All parameters have the same role as their namesake in the CoW Swap order struct with the exception of ",(0,o.jsx)(t.code,{children:"quoteId"}),". The latter parameter is the quote id obtained when requesting a quote for this trade from the CoW Swap API."]}),"\n",(0,o.jsx)(t.p,{children:"As of now, eth-flow orders are not matched by the CoW Swap infrastructure unless the quote id refers to a valid and fresh quote in the API."}),"\n",(0,o.jsx)(t.p,{children:"Some checks are performed on order creation. Failing any of these checks means that the transaction reverts."}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"The amount of ETH sent along with the transaction must be exactly what is needed to cover the sell amount plus the fees."}),"\n",(0,o.jsx)(t.li,{children:"The order must be valid at the time the transaction is mined."}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["The order parameters are used to compute the order digest according to the ",(0,o.jsx)(t.a,{href:"/docs-v2/docs/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders",children:"order mapping"}),". As mentioned before, the call reverts if an order with the same digest already exists or is invalidated; otherwise a new order is added to storage:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"user order digest -> validTo || msg.sender\n"})}),"\n",(0,o.jsx)(t.p,{children:"\\"})]})}const l=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(h,e)})):h(e)}},11151:(e,t,r)=>{r.d(t,{Zo:()=>c,ah:()=>s});var o=r(67294);const n=o.createContext({});function s(e){const t=o.useContext(n);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const a={};function c({components:e,children:t,disableParentContext:r}){let c;return c=r?"function"==typeof e?e({}):e||a:s(e),o.createElement(n.Provider,{value:c},t)}}}]);