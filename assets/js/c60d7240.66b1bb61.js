"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[5818],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(r),h=o,f=p["".concat(s,".").concat(h)]||p[h]||u[h]||a;return r?n.createElement(f,c(c({ref:t},d),{},{components:r})):n.createElement(f,c({ref:t},d))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},78652:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(87462),o=(r(67294),r(3905));const a={},c="Order Creation",i={unversionedId:"smart-contracts/eth-flow-contract/order-creation",id:"smart-contracts/eth-flow-contract/order-creation",title:"Order Creation",description:"The user calls a function on the eth-flow contract to create an order:",source:"@site/docs/smart-contracts/eth-flow-contract/order-creation.md",sourceDirName:"smart-contracts/eth-flow-contract",slug:"/smart-contracts/eth-flow-contract/order-creation",permalink:"/docs-v2/docs/smart-contracts/eth-flow-contract/order-creation",draft:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/smart-contracts/eth-flow-contract/order-creation.md",tags:[],version:"current",frontMatter:{}},s={},l=[],d={toc:l},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"order-creation"},"Order Creation"),(0,o.kt)("p",null,"The user calls a function on the eth-flow contract to create an order:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"function createOrder(EthFlowOrder.Data order) payable\n")),(0,o.kt)("p",null,"The parameters of the order creation struct can be seen ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cowprotocol/ethflowcontract/blob/v1.0.0/src/libraries/EthFlowOrder.sol#L19-L45"},"in the source code")," (together with their description) and are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"IERC20 buyToken\naddress receiver\nuint256 sellAmount\nuint256 buyAmount\nbytes32 appData\nuint256 feeAmount\nuint32 validTo\nbool partiallyFillable\nint64 quoteId\n")),(0,o.kt)("p",null,"All parameters have the same role as their namesake in the CoW Swap order struct with the exception of ",(0,o.kt)("inlineCode",{parentName:"p"},"quoteId"),". The latter parameter is the quote id obtained when requesting a quote for this trade from the CoW Swap API."),(0,o.kt)("p",null,"As of now, eth-flow orders are not matched by the CoW Swap infrastructure unless the quote id refers to a valid and fresh quote in the API."),(0,o.kt)("p",null,"Some checks are performed on order creation. Failing any of these checks means that the transaction reverts."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The amount of ETH sent along with the transaction must be exactly what is needed to cover the sell amount plus the fees."),(0,o.kt)("li",{parentName:"ol"},"The order must be valid at the time the transaction is mined.")),(0,o.kt)("p",null,"The order parameters are used to compute the order digest according to the ",(0,o.kt)("a",{parentName:"p",href:"/docs-v2/docs/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders"},"order mapping"),". As mentioned before, the call reverts if an order with the same digest already exists or is invalidated; otherwise a new order is added to storage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"user order digest -> validTo || msg.sender\n")),(0,o.kt)("p",null,"\\"))}u.isMDXComponent=!0}}]);