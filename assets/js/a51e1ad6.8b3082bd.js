"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[762],{49313:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>i,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=o(85893),n=o(11151);const s={},r="Allow-list authenticator",c={id:"smart-contracts/allow-list-authenticator-1/README",title:"Allow-list authenticator",description:"The allow-list authenticator contract determines which addresses are solvers. Before executing any operation which is access-restricted to a solver, the settlement contract queries this contract to determine if the caller is a solver.",source:"@site/docs/smart-contracts/allow-list-authenticator-1/README.md",sourceDirName:"smart-contracts/allow-list-authenticator-1",slug:"/smart-contracts/allow-list-authenticator-1/",permalink:"/docs-v2/docs/smart-contracts/allow-list-authenticator-1/",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/smart-contracts/allow-list-authenticator-1/README.md",tags:[],version:"current",frontMatter:{}},i={},l=[];function h(t){const e=Object.assign({h1:"h1",p:"p"},(0,n.ah)(),t.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"allow-list-authenticator",children:"Allow-list authenticator"}),"\n",(0,a.jsx)(e.p,{children:"The allow-list authenticator contract determines which addresses are solvers. Before executing any operation which is access-restricted to a solver, the settlement contract queries this contract to determine if the caller is a solver."}),"\n",(0,a.jsx)(e.p,{children:"The allow-list authenticator is the only contract that is deployed as a proxy."}),"\n",(0,a.jsx)(e.p,{children:"Eventually, we plan to deploy a new proxy implementation with the goal of making the choice of who is a solver more decentralized."}),"\n",(0,a.jsx)(e.p,{children:"For example, we might introduce the option of becoming a solver for addresses that are willing to stake some funds as collateral."}),"\n",(0,a.jsx)(e.p,{children:"The smart contract allows a manager to add or remove solvers with an on-chain transaction. The manager can be replaced in a transaction by the proxy owner or itself. Any of these actions emit the corresponding event."})]})}const d=function(t={}){const{wrapper:e}=Object.assign({},(0,n.ah)(),t.components);return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(h,t)})):h(t)}},11151:(t,e,o)=>{o.d(e,{Zo:()=>c,ah:()=>s});var a=o(67294);const n=a.createContext({});function s(t){const e=a.useContext(n);return a.useMemo((()=>"function"==typeof t?t(e):{...e,...t}),[e,t])}const r={};function c({components:t,children:e,disableParentContext:o}){let c;return c=o?"function"==typeof t?t({}):t||r:s(t),a.createElement(n.Provider,{value:c},e)}}}]);