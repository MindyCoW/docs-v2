"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[9626],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),i=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},l=function(e){var t=i(e.components);return n.createElement(d.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=i(a),u=r,f=s["".concat(d,".").concat(u)]||s[u]||m[u]||o;return a?n.createElement(f,c(c({ref:t},l),{},{components:a})):n.createElement(f,c({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,c=new Array(o);c[0]=u;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[s]="string"==typeof e?e:r,c[1]=p;for(var i=2;i<o;i++)c[i]=a[i];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},90855:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const o={},c="Create a meta-data document",p={unversionedId:"cow-sdk/order-meta-data-appdata/create-a-meta-data-document",id:"cow-sdk/order-meta-data-appdata/create-a-meta-data-document",title:"Create a meta-data document",description:"Orders in CoW Protocol can contain arbitrary data in a field called AppData.",source:"@site/docs/cow-sdk/order-meta-data-appdata/create-a-meta-data-document.md",sourceDirName:"cow-sdk/order-meta-data-appdata",slug:"/cow-sdk/order-meta-data-appdata/create-a-meta-data-document",permalink:"/docs-v2/docs/cow-sdk/order-meta-data-appdata/create-a-meta-data-document",draft:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/cow-sdk/order-meta-data-appdata/create-a-meta-data-document.md",tags:[],version:"current",frontMatter:{}},d={},i=[],l={toc:i},s="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(s,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-a-meta-data-document"},"Create a meta-data document"),(0,r.kt)("p",null,"Orders in CoW Protocol can contain arbitrary data in a field called ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData"),"."),(0,r.kt)("p",null,"The SDK facilitates the creation of these documents, and getting the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppData")," Hex number that summarizes it."),(0,r.kt)("p",null,"The most important thing to define in the meta-data is the name of your app, so the order-flow can be credited to it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst appCode = 'YOUR_APP_CODE'\n\nconst appDataDoc = await metadataApi.generateAppDataDoc({\n    appDataParams: { appCode },\n})\n\nconsole.log(appDataDoc)\n")),(0,r.kt)("p",null,"This will create a document similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "0.5.0",\n  "appCode": "YOUR_APP_CODE",\n  "metadata": {}\n} \n')),(0,r.kt)("p",null,"After creating the most basic document, you can see how to attach additional meta-data items."),(0,r.kt)("p",null,"For example, you could give information about who reffered the user creating the order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst appCode = 'YOUR_APP_CODE'\nconst referrerParams = { address: '0x1f5B740436Fc5935622e92aa3b46818906F416E9' }\n\nconst appDataDoc = await metadataApi.generateAppDataDoc({\n    appDataParams: { appCode },\n    metadataParams: { referrerParams },\n})\n\nconsole.log(appDataDoc)\n\n")),(0,r.kt)("p",null,"This will create a document similar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "0.5.0",\n    "appCode": "YOUR_APP_CODE",\n    "metadata": {\n      "referrer": {\n        "address": "0x1f5B740436Fc5935622e92aa3b46818906F416E9",\n        "version": "0.2.0"\n      },\n    },\n}\n')),(0,r.kt)("p",null,"For a complete list of meta-data that can be attach check ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cowprotocol/app-data"},"@cowprotocol/app-data")),(0,r.kt)("p",null,"Know that you know how to create meta-data documents, let's review how to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"appData")," that we need when we post orders. Just a hint, this ",(0,r.kt)("inlineCode",{parentName:"p"},"appData")," is deterministic based on the content of the meta-data document."))}m.isMDXComponent=!0}}]);