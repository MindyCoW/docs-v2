"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[2364],{12029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=n(85893),r=n(11151);const s={},a="Creating the order",i={id:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",title:"Creating the order",description:"Let\u2019s do an intermediate step and create a method to submit the order. The gist of the process is the following:",source:"@site/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order.md",sourceDirName:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet",slug:"/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",permalink:"/docs-v2/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order.md",tags:[],version:"current",frontMatter:{}},d={},l=[];function c(e){const t=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"creating-the-order",children:"Creating the order"}),"\n",(0,o.jsx)(t.p,{children:"Let\u2019s do an intermediate step and create a method to submit the order. The gist of the process is the following:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Get the quote of the trade to do"}),"\n",(0,o.jsx)(t.li,{children:"Create an order through the api and get an order id"}),"\n",(0,o.jsx)(t.li,{children:"Use the order id to set a flag on-chain, saying you are ok with that trade"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"I tried adding comments around the code"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'from time import time\nimport requests\nimport web3\ndef cowswap_sell(safe, sell_token, buy_token):\n    # Contract used to sign the order\n    gnosis_settlement = safe.contract("0x9008D19f58AAbD9eD0D60971565AA8510560ab41")\n    amount = sell_token.balanceOf(safe.address)\n\n    # get the fee + the buy amount after fee\n    fee_and_quote = "https://api.cow.fi/mainnet/api/v1/feeAndQuote/sell"\n    get_params = {\n        "sellToken": sell_token.address,\n        "buyToken": buy_token.address,\n        "sellAmountBeforeFee": amount\n    }\n    r = requests.get(fee_and_quote, params=get_params)\n    assert r.ok and r.status_code == 200\n\n    # These two values are needed to create an order\n    fee_amount = int(r.json()[\'fee\'][\'amount\'])\n    buy_amount_after_fee = int(r.json()[\'buyAmountAfterFee\'])\n    assert fee_amount > 0\n    assert buy_amount_after_fee > 0\n\n    # Pretty random order deadline :shrug:\n    deadline = chain.time() + 60*60*24*100 # 100 days\n\n    # Submit order\n    order_payload = {\n        "sellToken": sell_token.address,\n        "buyToken": buy_token.address,\n        "sellAmount": str(amount-fee_amount), # amount that we have minus the fee we have to pay\n        "buyAmount": str(buy_amount_after_fee), # buy amount fetched from the previous call\n        "validTo": deadline,\n        "appData": web3.Web3.keccak(text="yearn goes moooooo").hex(), # required field, do not change :)\n        "feeAmount": str(fee_amount),\n        "kind": "sell",\n        "partiallyFillable": False,\n        "receiver": safe.address,\n        "signature": "0x",\n        "from": safe.address,\n        "sellTokenBalance": "erc20",\n        "buyTokenBalance": "erc20",\n        "signingScheme": "presign" # Very important. this tells the api you are going to sign on chain\n    }\n    orders_url = f"https://protocol-mainnet.gnosis.io/api/v1/orders"\n    r = requests.post(orders_url, json=order_payload)\n    assert r.ok and r.status_code == 201\n    order_uid = r.json()\n    print(f"Payload: {order_payload}")\n    print(f"Order uid: {order_uid}")\n\n    # With the order id, we set the flag, basically signing as the gnosis safe.\n    gnosis_settlement.setPreSignature(order_uid, True)\n'})})]})}const u=function(e={}){const{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,o.jsx)(t,Object.assign({},e,{children:(0,o.jsx)(c,e)})):c(e)}},11151:(e,t,n)=>{n.d(t,{Zo:()=>i,ah:()=>s});var o=n(67294);const r=o.createContext({});function s(e){const t=o.useContext(r);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const a={};function i({components:e,children:t,disableParentContext:n}){let i;return i=n?"function"==typeof e?e({}):e||a:s(e),o.createElement(r.Provider,{value:i},t)}}}]);