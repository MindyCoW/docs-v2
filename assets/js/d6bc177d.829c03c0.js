"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[2919],{18430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(85893),s=n(11151);const i={},o="3. Signing the order",a={id:"tutorials/how-to-submit-orders-via-the-api/signing-the-order",title:"3. Signing the order",description:"We will resume the example from above, setting the validity (Unix timestamp) to August 4th 2021. We use keccak(GPv2 Place Order Tutorial) as appData (you can use your individual 32 bytes to identify the \u201csource\u201d of your orders).",source:"@site/docs/tutorials/how-to-submit-orders-via-the-api/4.-signing-the-order.md",sourceDirName:"tutorials/how-to-submit-orders-via-the-api",slug:"/tutorials/how-to-submit-orders-via-the-api/signing-the-order",permalink:"/docs-v2/docs/tutorials/how-to-submit-orders-via-the-api/signing-the-order",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/how-to-submit-orders-via-the-api/4.-signing-the-order.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{}},c={},d=[{value:"<strong>Security notice:</strong> ",id:"security-notice-",level:2}];function l(e){const t=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre",ul:"ul",li:"li",h2:"h2",strong:"strong"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"3-signing-the-order",children:"3. Signing the order"}),"\n",(0,r.jsxs)(t.p,{children:["We will resume the example from above, setting the validity (Unix timestamp) to ",(0,r.jsx)(t.a,{href:"https://www.epochconverter.com/?q=1628035200",children:"August 4th 2021"}),". We use ",(0,r.jsx)(t.code,{children:"keccak(GPv2 Place Order Tutorial)"})," as appData (you can use your individual 32 bytes to identify the \u201csource\u201d of your orders)."]}),"\n",(0,r.jsx)(t.p,{children:"Our typescript library provides a convenient way to create valid signatures for your order."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'import {\n  domain,\n  Order,\n  SigningScheme,\n  signOrder,\n} from "@gnosis.pm/gp-v2-contracts"\n\nconst [trader] = await ethers.getSigners();\nconst order = {\n    sellToken: 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48,\n    buyToken: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2,\n    sellAmount: 10000000000,\n    buyAmount: 4959721654652700610,\n    validTo: 1628035200,\n    appData: 0xf785fae7a7c5abc49f3cd6a61f6df1ff26433392b066ee9ff2240ff1eb7ab6e4,\n    feeAmount: 14075734,\n    kind: OrderKind.SELL,\n    partiallyFillable: false,\n    receiver: ethers.constants.AddressZero,\n  }\nconst raw_signature = await signOrder(\n      domain(1, \u201d0x9008D19f58AAbD9eD0D60971565AA8510560ab41\u201d),\n      order,\n      trader,\n      SigningScheme.ETHSIGN\n    );\n// Needed to turn the three part object into a single bytestring\nconst signature = ethers.utils.joinSignature(rawSignature.data);\n'})}),"\n",(0,r.jsx)(t.p,{children:"If you are using a different programming language you may have to write your own signing logic. Here are some pointers:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/gnosis/gp-v2-services/blob/d76f23b867e8dbb201f51736c9666e9b18d1086e/model/src/order.rs#L166",children:"A reference implementation in rust"})," (the domain separator can be queried from the ",(0,r.jsx)(t.a,{href:"https://etherscan.io/address/0x9008D19f58AAbD9eD0D60971565AA8510560ab41#readContract",children:"Settlement Contract"}),")"]}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://pastebin.com/cKXUz0SW",children:"A sample trading bot in python"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://pastebin.com/r787C2wT",children:"A sample trading bot in go"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ultimate source of truth for signature verification is the smart contract\u2019s implementation of the ",(0,r.jsx)(t.a,{href:"https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2Order.sol#L134",children:"order digest"})," and how it gets verified given ",(0,r.jsx)(t.a,{href:"https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/mixins/GPv2Signing.sol#L141",children:"different signing schemes"}),"."]}),"\n",(0,r.jsxs)(t.h2,{id:"security-notice-",children:[(0,r.jsx)(t.strong,{children:"Security notice:"})," "]}),"\n",(0,r.jsxs)(t.p,{children:["Do not sign orders with simultaneously ",(0,r.jsx)(t.code,{children:"sellAmount == 0"}),", ",(0,r.jsx)(t.code,{children:"buyAmount == 0"}),", and ",(0,r.jsx)(t.code,{children:"partiallyFillable == false"}),". "]}),"\n",(0,r.jsx)(t.p,{children:'Because of a known issue in the contracts, such orders can be settled unlimited times, which means that any solver could take the fee amount multiple times. There is normally no reason to generate such "empty" order. However, you should consider this case if you are signing orders that come from potentially untrusted sources.'})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(l,e)})):l(e)}},11151:(e,t,n)=>{n.d(t,{Zo:()=>a,ah:()=>i});var r=n(67294);const s=r.createContext({});function i(e){const t=r.useContext(s);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function a({components:e,children:t,disableParentContext:n}){let a;return a=n?"function"==typeof e?e({}):e||o:i(e),r.createElement(s.Provider,{value:a},t)}}}]);