"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[9380],{52730:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var t=o(85893),r=o(11151);const s={},i="STEP 2: Sign the order",d={id:"cow-sdk/sign-and-post-orders/step-2-sign-the-order",title:"STEP 2: Sign the order",description:"Once you know the price and fee, we can create the order and sign it:",source:"@site/docs/cow-sdk/sign-and-post-orders/step-2-sign-the-order.md",sourceDirName:"cow-sdk/sign-and-post-orders",slug:"/cow-sdk/sign-and-post-orders/step-2-sign-the-order",permalink:"/docs-v2/docs/cow-sdk/sign-and-post-orders/step-2-sign-the-order",draft:!1,unlisted:!1,editUrl:"https://github.com/cowprotocol/docs/tree/main/docs/cow-sdk/sign-and-post-orders/step-2-sign-the-order.md",tags:[],version:"current",frontMatter:{}},c={},a=[];function l(e){const n=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",code:"code",pre:"pre",blockquote:"blockquote",a:"a"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"step-2-sign-the-order",children:"STEP 2: Sign the order"}),"\n",(0,t.jsx)(n.p,{children:"Once you know the price and fee, we can create the order and sign it:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Technically the order is just a signed message with your intent to trade, and contains your ",(0,t.jsx)(n.code,{children:"Limit Price"})," and ",(0,t.jsx)(n.code,{children:"Fee"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["As explained before, you can choose your ",(0,t.jsx)(n.code,{children:"Limit Price"}),", but some general approach is to take the current Market Price and apply some slippage tolerance to it. ",(0,t.jsx)(n.code,{children:"Received Amount = Expected Amount * (1 - Slippage Tolerance)"})]}),"\n",(0,t.jsx)(n.li,{children:"The SDK will provide an easy way to sign orders given the raw data"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { OrderSigningUtils, OrderKind, SupportedChainId } from \'@cowprotocol/cow-sdk\'\nimport { Web3Provider } from \'@ethersproject/providers\'\n\nconst provider = new Web3Provider(window.ethereum)\nconst signer = provider.getSigner()\n\nconst { sellToken, buyToken, validTo, buyAmount, sellAmount, receiver, feeAmount } = quoteResponse.quote\n\n// Prepare the RAW order\nconst order = {\n  kind: OrderKind.SELL, // SELL or BUY  \n  receiver, // Your account or any other\n  sellToken,\n  buyToken,\n\n  partiallyFillable: false, // "false" is for a "Fill or Kill" order, "true" for allowing "Partial execution" which is not supported yet\n  // Deadline\n  validTo,\n\n  // Limit Price\n  //    You can apply some slippage tolerance here to make sure the trade is executed. \n  //    CoW protocol protects from MEV, so it can work with higher slippages\n  sellAmount,\n  buyAmount, \n\n  // Use the fee you received from the API\n  feeAmount,\n\n  // The appData allows you to attach arbitrary information (meta-data) to the order. Its explained in their own section. For now, you can use this 0x0 value\n  appData: \'0x0000000000000000000000000000000000000000000000000000000000000000\'\n}\n\n// Sign the order\nconst signedOrder = await OrderSigningUtils.signOrder(order, SupportedChainId.MAINNET, signer)\n'})}),"\n",(0,t.jsx)(n.p,{children:"At this point, you have a signed order. So next step will be to post it to the API so it's considered by the solvers and executed."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\ud83d\udcda Read more about ",(0,t.jsx)(n.code,{children:"appData"})," ",(0,t.jsx)(n.a,{href:"https://github.com/cowprotocol/app-data",children:"here"})]}),"\n"]})]})}const p=function(e={}){const{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(l,e)})):l(e)}},11151:(e,n,o)=>{o.d(n,{Zo:()=>d,ah:()=>s});var t=o(67294);const r=t.createContext({});function s(e){const n=t.useContext(r);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function d({components:e,children:n,disableParentContext:o}){let d;return d=o?"function"==typeof e?e({}):e||i:s(e),t.createElement(r.Provider,{value:d},n)}}}]);