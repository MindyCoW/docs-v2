"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[1089],{33776:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>a});var s=r(85893),n=r(11151);const d={},c="User and ETH Flow Contract Orders",l={id:"smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders",title:"User and ETH Flow Contract Orders",description:'Every ETH sell order from a user ("user order") will have a unique associated order in the eth-flow contract ("contract order").',source:"@site/docs/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders.md",sourceDirName:"smart-contracts/eth-flow-contract",slug:"/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders",permalink:"/docs-v2/docs/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/smart-contracts/eth-flow-contract/user-and-eth-flow-contract-orders.md",tags:[],version:"current",frontMatter:{}},o={},a=[];function i(e){const t=Object.assign({h1:"h1",p:"p"},(0,n.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"user-and-eth-flow-contract-orders",children:"User and ETH Flow Contract Orders"}),"\n",(0,s.jsx)(t.p,{children:'Every ETH sell order from a user ("user order") will have a unique associated order in the eth-flow contract ("contract order").'}),"\n",(0,s.jsx)(t.p,{children:"This order will be implicitly created when the user deposits ETH."}),"\n",(0,s.jsx)(t.p,{children:"For simplicity, both orders will have the same representation that is used for settlement orders, but eth-flow order have slightly different parameters in the contract (for example, there is no need to specify a sell token since it's assumed to be WETH)."}),"\n",(0,s.jsx)(t.p,{children:"The next table describes how to convert a user order into a contract order."}),"\n",(0,s.jsx)(t.p,{children:"Note that what is described here as a user order is not a valid order for the settlement contract. It represents the data used by the eth-flow contract for bookkeeping. The contract order will be the one to be executed."}),"\n",(0,s.jsxs)("table",{"data-header-hidden":!0,children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Parameter"}),(0,s.jsx)("th",{children:"User"}),(0,s.jsx)("th",{children:"Contract"}),(0,s.jsx)("th",{"data-hidden":!0})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"sellToken"}),(0,s.jsx)("td",{children:"ETH"}),(0,s.jsx)("td",{children:"WETH"}),(0,s.jsx)("td",{children:"Comment"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"buyToken"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:" "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"receiver"}),(0,s.jsx)("td",{children:"any except 0x0..0"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:"Removing 0x0..0 because the receiver must be explicit. Using the zero address would imply a change of the receiver in the conversion."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"sellAmount"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:" "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"buyAmount"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:" "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"validTo"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"infinity"}),(0,s.jsx)("td",{children:"It needs to be infinity because we rely on filledAmount in the exchange contract, which could be cleared by freeFilledAmountStorage."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"appData"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:" "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"feeAmount"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:" "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"kind"}),(0,s.jsx)("td",{children:"sell"}),(0,s.jsx)("td",{children:"sell"}),(0,s.jsx)("td",{children:"This setup doesn't work well for BUY orders as the (small) ETH leftovers would be left in the eth-flow contract and it wouldn't be worth it in general to spend the gas to withdraw."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"partiallyFillable"}),(0,s.jsx)("td",{children:"any"}),(0,s.jsx)("td",{children:"same as user"}),(0,s.jsx)("td",{children:"Supporting partially fillable orders with replacement makes things more complicated, but it should be possible."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"sellTokenBalance"}),(0,s.jsx)("td",{children:"external"}),(0,s.jsx)("td",{children:"external"}),(0,s.jsx)("td",{children:"Probably we could make internal Balancer balances work as well, but I consider this low prio and didn't think about it."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"buyTokenBalance"}),(0,s.jsx)("td",{children:"external"}),(0,s.jsx)("td",{children:"external"}),(0,s.jsx)("td",{children:"\u2191"})]})]})]})]})}const h=function(e={}){const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}},11151:(e,t,r)=>{r.d(t,{Zo:()=>l,ah:()=>d});var s=r(67294);const n=s.createContext({});function d(e){const t=s.useContext(n);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const c={};function l({components:e,children:t,disableParentContext:r}){let l;return l=r?"function"==typeof e?e({}):e||c:d(e),s.createElement(n.Provider,{value:l},t)}}}]);